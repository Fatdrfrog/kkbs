/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Wasabi (https://sketchfab.com/Inked_Wasabi)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/maomao-the-apothecary-diaries-2b535555fd064653ab73bbe92053314e
Title: 猫猫_薬屋のひとりごと [Maomao] The Apothecary Diaries
*/

"use client";

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import { a } from "@react-spring/three";

export function Bayan({ isRotating, setRotating, ...props }) {
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF("./diaries.glb");

  const boardRef = useRef();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();

    setRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();

    setRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
      boardRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setRotating(true);
      boardRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setRotating(true);
      boardRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
      setRotating(false);
    }
  };

  useFrame(() => {
    if (isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;

        boardRef.current.rotation.y += rotationSpeed.current;
      } else {
        const rotation = boardRef.current.rotation.y;
        /**
         * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
         * The goal is to ensure that the rotation value remains within a specific range to
         * prevent potential issues with very large or negative rotation values.
         *  Here's a step-by-step explanation of what this code does:
         *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
         *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
         *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
         *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
         *     This is done to ensure that the value remains positive and within the range of
         *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
         *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
         *     modulo operation to the value obtained in step 2. This step guarantees that the value
         *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
         *     circle in radians.
         */
        const normalizedRotation =
          ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

        // Set the current stage based on the island's orientation
        // switch (true) {
        //   case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        //     setCurrentStage(4);
        //     break;
        //   case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        //     setCurrentStage(3);
        //     break;
        //   case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        //     setCurrentStage(2);
        //     break;
        //   case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        //     setCurrentStage(1);
        //     break;
        //   default:
        //     setCurrentStage(null);
        // }
      }
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;

    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [
    gl,
    handlePointerDown,
    handlePointerUp,
    handlePointerMove,
    handleKeyDown,
    handleKeyUp,
  ]);

  return (
    <a.group ref={boardRef} {...props} dispose={null}>
      <mesh geometry={nodes.Body_Body_0.geometry} material={materials.Body} />
      <mesh
        geometry={nodes.Body_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh
        geometry={nodes.HairFront_Hair_0.geometry}
        material={materials.Hair}
      />
      <mesh
        geometry={nodes.HairFront_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh
        geometry={nodes.Tops_Clothes_0.geometry}
        material={materials.Clothes}
      />
      <mesh
        geometry={nodes.Tops_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh
        geometry={nodes.Skirt_Clothes_0.geometry}
        material={materials.Clothes}
      />
      <mesh
        geometry={nodes.Skirt_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh
        geometry={nodes.Sneaker_Clothes_0.geometry}
        material={materials.Clothes}
      />
      <mesh
        geometry={nodes.Sneaker_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh geometry={nodes.Face_Face_0.geometry} material={materials.Face} />
      <mesh
        geometry={nodes.Face_EyesInside_0.geometry}
        material={materials.EyesInside}
      />
      <mesh geometry={nodes.Face_Eyes_0.geometry} material={materials.Eyes} />
      <mesh
        geometry={nodes.Face_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh
        geometry={nodes.EyesHilight_Transparent_0.geometry}
        material={materials.Transparent}
      />
      <mesh
        geometry={nodes.ShadowHair_Transparent_0.geometry}
        material={materials.Transparent}
      />
      <mesh
        geometry={nodes.ShadowHair_OH_Outline_Material_0.geometry}
        material={materials.OH_Outline_Material}
      />
      <mesh geometry={nodes.Ground_Tile_0.geometry} material={materials.Tile} />
    </a.group>
  );
}
